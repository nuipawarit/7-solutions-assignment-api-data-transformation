// @generated by protobuf-ts 2.9.1 with parameter server_grpc1
// @generated from protobuf file "api.proto" (syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Employee
 */
export interface Employee {
    /**
     * @generated from protobuf field: map<string, Employee.Department> department = 1;
     */
    department: {
        [key: string]: Employee_Department;
    };
}
/**
 * @generated from protobuf message Employee.Department
 */
export interface Employee_Department {
    /**
     * @generated from protobuf field: uint32 male = 1;
     */
    male: number;
    /**
     * @generated from protobuf field: uint32 female = 2;
     */
    female: number;
    /**
     * @generated from protobuf field: string ageRange = 3;
     */
    ageRange: string;
    /**
     * @generated from protobuf field: uint32 ageMode = 4;
     */
    ageMode: number;
    /**
     * @generated from protobuf field: map<string, uint32> hair = 5;
     */
    hair: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: map<string, string> addressUser = 6;
     */
    addressUser: {
        [key: string]: string;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Employee$Type extends MessageType<Employee> {
    constructor() {
        super("Employee", [
            { no: 1, name: "department", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Employee_Department } }
        ]);
    }
    create(value?: PartialMessage<Employee>): Employee {
        const message = { department: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Employee>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Employee): Employee {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, Employee.Department> department */ 1:
                    this.binaryReadMap1(message.department, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: Employee["department"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Employee["department"] | undefined, val: Employee["department"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Employee_Department.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field Employee.department");
            }
        }
        map[key ?? ""] = val ?? Employee_Department.create();
    }
    internalBinaryWrite(message: Employee, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, Employee.Department> department = 1; */
        for (let k of Object.keys(message.department)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Employee_Department.internalBinaryWrite(message.department[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Employee
 */
export const Employee = new Employee$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Employee_Department$Type extends MessageType<Employee_Department> {
    constructor() {
        super("Employee.Department", [
            { no: 1, name: "male", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "female", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "ageRange", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ageMode", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "hair", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 6, name: "addressUser", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<Employee_Department>): Employee_Department {
        const message = { male: 0, female: 0, ageRange: "", ageMode: 0, hair: {}, addressUser: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Employee_Department>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Employee_Department): Employee_Department {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 male */ 1:
                    message.male = reader.uint32();
                    break;
                case /* uint32 female */ 2:
                    message.female = reader.uint32();
                    break;
                case /* string ageRange */ 3:
                    message.ageRange = reader.string();
                    break;
                case /* uint32 ageMode */ 4:
                    message.ageMode = reader.uint32();
                    break;
                case /* map<string, uint32> hair */ 5:
                    this.binaryReadMap5(message.hair, reader, options);
                    break;
                case /* map<string, string> addressUser */ 6:
                    this.binaryReadMap6(message.addressUser, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: Employee_Department["hair"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Employee_Department["hair"] | undefined, val: Employee_Department["hair"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field Employee.Department.hair");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    private binaryReadMap6(map: Employee_Department["addressUser"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Employee_Department["addressUser"] | undefined, val: Employee_Department["addressUser"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field Employee.Department.addressUser");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Employee_Department, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 male = 1; */
        if (message.male !== 0)
            writer.tag(1, WireType.Varint).uint32(message.male);
        /* uint32 female = 2; */
        if (message.female !== 0)
            writer.tag(2, WireType.Varint).uint32(message.female);
        /* string ageRange = 3; */
        if (message.ageRange !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ageRange);
        /* uint32 ageMode = 4; */
        if (message.ageMode !== 0)
            writer.tag(4, WireType.Varint).uint32(message.ageMode);
        /* map<string, uint32> hair = 5; */
        for (let k of Object.keys(message.hair))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).uint32(message.hair[k]).join();
        /* map<string, string> addressUser = 6; */
        for (let k of Object.keys(message.addressUser))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.addressUser[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Employee.Department
 */
export const Employee_Department = new Employee_Department$Type();
/**
 * @generated ServiceType for protobuf service EmployeeService
 */
export const EmployeeService = new ServiceType("EmployeeService", [
    { name: "GetEmployee", options: {}, I: Empty, O: Employee }
]);
